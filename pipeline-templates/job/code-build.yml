parameters:
  SolutionBaseName:
  BuildConfiguration:

jobs:
- job: CodeBuild
  pool:
    vmImage: 'macOS-latest' # Use a macOS agent
    workspace:
      clean: all
  variables:
  - group: BUILD Management Resources
  steps:
  # Step 1: Fetch GitVersion info
  - template: azure-pipelines-templates/build/step/gitversion.yml@das-platform-building-blocks

  # Step 2: Install iOS Workloads
  - task: DotNetCoreCLI@2
    displayName: Install iOS Workload
    inputs:
      command: custom
      custom: workload
      arguments: install ios --skip-manifest-update

  # Step 3: Application Build Step
  - template: azure-pipelines-templates/build/step/app-build.yml@das-platform-building-blocks
    parameters:
      ContinueOnVulnerablePackageScanError: true

  # Step 4: Publish the iOS application
  - task: DotNetCoreCLI@2
    displayName: Publish - dotnet publish ${{ parameters.SolutionBaseName }} for iOS
    inputs:
      command: publish
      publishWebProjects: false
      projects: src/${{ parameters.SolutionBaseName }}/${{ parameters.SolutionBaseName }}.csproj
      arguments: -o $(build.artifactstagingdirectory)/publish -c ${{ parameters.BuildConfiguration }} -f net8.0-ios --no-build
      modifyOutputPath: true
      zipAfterPublish: true

  # Step 5: Copy additional files to artifact staging directory
  - task: CopyFiles@2
    displayName: Copy Files to $(build.artifactstagingdirectory)/publish
    inputs:
      Contents: |
        azure/**
      TargetFolder: $(build.artifactstagingdirectory)/publish
      OverWrite: true

  # Step 6: Publish build artifact
  - task: PublishPipelineArtifact@1
    displayName: Publish Build Artifact
    inputs:
      targetPath: $(build.artifactstagingdirectory)/publish
      artifactName: ${{ parameters.SolutionBaseName }}